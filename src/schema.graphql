# Exposes a URL that specifies the behaviour of this scalar.
directive @specifiedBy(
  # The URL that specifies the behaviour of this scalar.
  url: String!
) on SCALAR

#  see also https://github.com/graphql-java/graphql-java-extended-validation/blob/master/README.md
directive @DecimalMax(value: String!, inclusive: Boolean! = true, message: String = "graphql.validation.DecimalMax.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @DecimalMin(value: String!, inclusive: Boolean! = true, message: String = "graphql.validation.DecimalMin.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Max(value: Int! = 2147483647, message: String = "graphql.validation.Max.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Min(value: Int! = 0, message: String = "graphql.validation.Min.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Negative(message: String = "graphql.validation.Negative.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NegativeOrZero(message: String = "graphql.validation.NegativeOrZero.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NotBlank(message: String = "graphql.validation.NotBlank.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NotEmpty(message: String = "graphql.validation.NotEmpty.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @ContainerNotEmpty(message: String = "graphql.validation.ContainerNotEmpty.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Pattern(regexp: String! = ".*", message: String = "graphql.validation.Pattern.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Positive(message: String = "graphql.validation.Positive.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @PositiveOrZero(message: String = "graphql.validation.PositiveOrZero.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Range(min: Int = 0, max: Int = 2147483647, message: String = "graphql.validation.Range.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Size(min: Int = 0, max: Int = 2147483647, message: String = "graphql.validation.Size.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @ContainerSize(min: Int = 0, max: Int = 2147483647, message: String = "graphql.validation.ContainerSize.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @resolveTo(requiredSelectionSet: String, sourceName: String!, sourceTypeName: String!, sourceFieldName: String!, sourceSelectionSet: String, sourceArgs: ResolveToSourceArgs, keyField: String, keysArg: String, pubsubTopic: String, filterBy: String, additionalArgs: ResolveToSourceArgs, result: String, resultType: String) on FIELD_DEFINITION

interface Assessment {
  # Assessment metadata
  assessmentMetadata: AssessmentMetadata!

  # ID of the content
  id: UUID!

  # Metadata of the content
  metadata: ContentMetadata!

  # Progress data of the content for the current user.
  userProgressData: UserProgressData!

  # Progress data of the specified user.
  progressDataForUser(userId: UUID!): UserProgressData!
}

type AssessmentMetadata {
  # Number of skill points a student receives for completing this content
  skillPoints: Int!

  # Type of the assessment
  skillType: SkillType!

  # The initial learning interval for the assessment in days.
  # This is the interval that is applied after the assessment is completed the first time.
  # Following intervals are calculated based on the previous interval and the user's performance.
  # If this is null, the assessment will never be scheduled for review, which
  # is useful for assessments that are not meant to be repeated.
  initialLearningInterval: Int
}

input AssessmentMetadataInput {
  # Number of skill points a student receives for completing this content
  skillPoints: Int!

  # Type of the assessment
  skillType: SkillType!

  # The initial learning interval for the assessment in days.
  # This is the interval that is applied after the assessment is completed the first time.
  # Following intervals are calculated based on the previous interval and the user's performance.
  # If this is null, the assessment will never be scheduled for review, which
  # is useful for assessments that are not meant to be repeated.
  initialLearningInterval: Int
}

# A chapter is a part of a course.
type Chapter {
  # UUID of the chapter, generated automatically
  id: UUID!

  # Title of the chapter, maximum length is 255 characters.
  title: String!

  # Description of the chapter, maximum length is 3000 characters.
  description: String!

  # Number of the chapter, determines the order of the chapters.
  number: Int!

  # Start date of the chapter, ISO 8601 format.
  startDate: DateTime!

  # End date of the chapter, ISO 8601 format.
  endDate: DateTime!

  # Suggested Start date to start the chapter, ISO 8601 format.
  # Must be after Start Date and before the End dates.
  suggestedStartDate: DateTime

  # Suggested End date of the chapter, ISO 8601 format.
  # Must be after the Start Dates and before the End dates.
  suggestedEndDate: DateTime

  # The course the chapter belongs to.
  course: Course!
  contents: [Content!]!
}

input ChapterFilter {
  title: StringFilter
  description: StringFilter
  number: IntFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  suggestedStartDate: DateTimeFilter
  suggestedEndDate: DateTimeFilter
  and: [ChapterFilter!]
  or: [ChapterFilter!]
  not: ChapterFilter
}

# Return type of the chapters query, contains a list of chapters and pagination info.
type ChapterPayload {
  elements: [Chapter!]!
  pagination: PaginationInfo!
}

interface Content {
  # ID of the content
  id: UUID!

  # Metadata of the content
  metadata: ContentMetadata!

  # Progress data of the content for the current user.
  userProgressData: UserProgressData!

  # Progress data of the specified user.
  progressDataForUser(userId: UUID!): UserProgressData!
}

type ContentMetadata {
  # Name of the content
  name: String!

  # Content type
  type: ContentType!

  # Suggested date when the content should be done
  suggestedDate: DateTime!

  # Number of reward points a student receives for completing this content
  rewardPoints: Int!

  # ID of the chapter this content is associated with
  chapterId: UUID!

  # TagNames this content is tagged with
  tagNames: [String!]!
}

type ContentPayload {
  # the contents
  elements: [Content!]!

  # pagination info
  pageInfo: PaginationInfo!
}

# Type of the content
enum ContentType {
  MEDIA
  FLASHCARDS
}

# Courses are the main entity of the application. They are the top level of the
# hierarchy and contain chapters.
type Course {
  # UUID of the course. Generated automatically when creating a new course.
  id: UUID!

  # Title of the course. Maximal length is 255 characters, must not be blank.
  title: String!

  # Detailed description of the course. Maximal length is 3000 characters.
  description: String!

  # Start date of the course, ISO 8601 format.
  # Users can only access the course and work on course content after the start date.
  # Must be before the end date.
  startDate: DateTime!

  # End date of the course, ISO 8601 format.
  # Users can no longer access the course and work on course content after the end date.
  # Must be after the start date.
  endDate: DateTime!

  # Published state of the course. If the course is published, it is visible to users.
  published: Boolean!

  # Chapters of the course. Can be filtered and sorted.
  chapters(
    filter: ChapterFilter

    # The fields to sort by. The default sort order is by chapter number.
    # Throws an error if no field with the given name exists.
    sortBy: [String!]! = []

    # The sort direction for each field. If not specified, defaults to ASC.
    sortDirection: [SortDirection!]! = [ASC]
    pagination: Pagination
  ): ChapterPayload!
  rewardScores: RewardScores!
  scoreboard: [ScoreboardItem!]!
}

# Input type for filtering courses. All fields are optional.
# If multiple filters are specified, they are combined with AND (except for the or field).
input CourseFilter {
  title: StringFilter
  description: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  published: Boolean
  and: [CourseFilter!]
  or: [CourseFilter!]
  not: CourseFilter
}

# Represents a course membership object of a user. Each user can be a member of
# set of courses and some users can also own courses
type CourseMembership {
  userId: UUID!
  courseId: UUID!
  role: String!
  course: Course!
}

# Represents a course membership input object of a user.
input CourseMembershipInput {
  userId: UUID!
  courseId: UUID!
  role: String!
}

# Return type for the course query. Contains the course and the pagination info.
type CoursePayload {
  elements: [Course!]!
  pagination: PaginationInfo!
}

# Resources are all types of content present in a course. Each resource can be available or unavailable in a course.
type CourseResourceAssociation {
  # UUID of the resource.
  id: UUID!

  # A list of course IDs a resource is presently available in
  availableCourses: [UUID!]!

  # A list of course IDs a resource is presently unavailable in
  unAvailableCourses: [UUID!]!
}

input CreateAssessmentInput {
  # Metadata for the new Content
  metadata: CreateContentMetadataInput!

  # Assessment metadata
  assessmentMetadata: AssessmentMetadataInput!
}

# Input type for creating chapters.
input CreateChapterInput {
  # Title of the chapter, maximum length is 255 characters, must not be blank.
  title: String!

  # Description of the chapter, maximum length is 3000 characters.
  description: String!

  # Number of the chapter, determines the order of the chapters, must be positive.
  number: Int!

  # Start date of the chapter, ISO 8601 format.
  # Must be before the end date.
  startDate: DateTime!

  # End date of the chapter, ISO 8601 format.
  # Must be after the start date.
  endDate: DateTime!

  # Suggested Start date to start the chapter, ISO 8601 format.
  # Must be after Start Date and before the End dates.
  suggestedStartDate: DateTime

  # Suggested End date of the chapter, ISO 8601 format.
  # Must be after the Start Dates and before the End dates.
  suggestedEndDate: DateTime

  # ID of the course the chapter belongs to.
  # Must be a UUID of an existing course.
  courseId: UUID!
}

input CreateContentMetadataInput {
  # Name of the content
  name: String!

  # Type of the content
  type: ContentType!

  # Suggested date when the content should be done
  suggestedDate: DateTime!

  # Number of reward points a student receives for completing this content
  rewardPoints: Int!

  # ID of the chapter this content is associated with
  chapterId: UUID!

  # TagNames this content is tagged with
  tagNames: [String!]! = []
}

# Input type for creating a new course. See also on the course type for detailed field descriptions.
input CreateCourseInput {
  # Title of the course, max 255 characters, must not be blank.
  title: String!

  # Description of the course, max 3000 characters.
  description: String!

  # Start date of the course, ISO 8601 format.
  # Must be before the end date.
  startDate: DateTime!

  # End date of the course, ISO 8601 format.
  # Must be after the start date.
  endDate: DateTime!

  # Published status of the course.
  published: Boolean!
}

input CreateFlashcardInput {
  # Id of the flashcard set this flashcard belongs to.
  setId: UUID!

  # List of sides of this flashcard. Must be at least two sides.
  sides: [CreateFlashcardSideInput!]!
}

input CreateFlashcardInSetInput {
  # List of sides of this flashcard. Must be at least two sides.
  sides: [CreateFlashcardSideInput!]!
}

input CreateFlashcardSetInput {
  # The uuid of the assessment this flashcard set belongs to.
  assessmentId: UUID!

  # List of flashcards in this set.
  flashcards: [CreateFlashcardInSetInput!]!
}

input CreateFlashcardSideInput {
  # Text of this flashcard side. This can be markdown. Max length is 3000 characters.
  text: String!

  # Label of this flashcard side. E.g. "Front" or "Back", or "Question" or "Answer".
  label: String!

  # Whether this side is a question, i.e. should be shown to the user to guess the other sides or not.
  isQuestion: Boolean!
}

# Input for creating new media content. Media specific fields are stored in the Media Service.
input CreateMediaContentInput {
  # Metadata for the new Content
  metadata: CreateContentMetadataInput!
}

input CreateMediaRecordInput {
  #  Name of the media record. Cannot be blank, maximum length 255 characters.
  name: String!

  #  Type of the media record.
  type: MediaType!

  #  IDs of the MediaContents this media record is associated with
  contentIds: [UUID!]!
}

# An RFC-3339 compliant Full Date Scalar
scalar Date

# A slightly refined version of RFC-3339 compliant DateTime Scalar
scalar DateTime

# Filter for date values.
# If multiple filters are specified, they are combined with AND.
input DateTimeFilter {
  # If specified, filters for dates after the specified value.
  after: DateTime

  # If specified, filters for dates before the specified value.
  before: DateTime
}

# A flashcard is a set of two or more sides. Each side has a label and a text.
# The label is used to specify which side of the flashcard is being shown to the user first for learning
# and which sides he has to guess.
type Flashcard {
  # Unique identifier of this flashcard.
  id: UUID!

  # List of sides of this flashcard.
  sides: [FlashcardSide!]!

  # Progress data of the flashcard, specific to given users.
  # If userId is not provided, the progress data of the current user is returned.
  userProgressData: FlashcardProgressData!
}

type FlashcardProgressData {
  # The date the user learned the flashcard.
  # This is null it the user has not learned the content item once.
  lastLearned: DateTime

  # The learning interval in days for the content item.
  learningInterval: Int

  # The next time the content should be learned.
  # Calculated using the date the user completed the content item and the learning interval.
  # This is null if the user has not completed the content item once.
  nextLearn: DateTime
}

type FlashcardProgressDataLog {
  # The id of the Log
  id: UUID

  # The date the user learned the flashcard.
  learnedAt: DateTime!

  # Whether the user knew the flashcard or not.
  success: Boolean!
}

# A set of flashcards. A flashcard set belongs to exactly one assessment. Therefore, the uuid of the assessment
# also serves as the identifier of a flashcard set.
type FlashcardSet {
  # The uuid of the assessment this flashcard set belongs to.
  # This also serves as the identifier of this flashcard set.
  assessmentId: UUID!

  # List of flashcards in this set.
  flashcards: [Flashcard!]!
}

# A set of flashcards, flashcard related fields are stored in the flashcard service.
type FlashcardSetAssessment implements Assessment& Content {
  # Assessment metadata
  assessmentMetadata: AssessmentMetadata!

  # ID of the content
  id: UUID!

  # Metadata of the content
  metadata: ContentMetadata!

  # Progress data of the content for the current user.
  userProgressData: UserProgressData!

  # Progress data of the specified user.
  progressDataForUser(userId: UUID!): UserProgressData!
  flashcardSet: FlashcardSet!
}

type FlashcardSide {
  # Text of this flashcard side. This can be markdown.
  text: String!

  # Label of this flashcard side. E.g. "Front" or "Back", or "Question" or "Answer".
  label: String!

  # Whether this side is a question, i.e. should be shown to the user to guess the other sides or not.
  isQuestion: Boolean!
}

# Filter for integer values.
# If multiple filters are specified, they are combined with AND.
input IntFilter {
  # An integer value to match exactly.
  equals: Int

  # If specified, filters for values greater than to the specified value.
  greaterThan: Int

  # If specified, filters for values less than to the specified value.
  lessThan: Int
}

# 24-hour clock time value string in the format `hh:mm:ss` or `hh:mm:ss.sss`.
scalar LocalTime

input LogFlashcardLearnedInput {
  # The id of the flashcard that was learned.
  flashcardId: UUID!

  # The id of the user that learned the flashcard.
  userId: UUID!

  # If the user knew the flashcard or not.
  successful: Boolean!
}

input LogFlashcardSetLearnedInput {
  # The id of the flashcard that was learned.
  flashcardSetId: UUID!

  # The id of the user that learned the flashcard.
  userId: UUID!

  # The percentage of flashcards in the set that the user knew.
  percentageSuccess: Float!
}

type MediaContent implements Content {
  # ID of the content
  id: UUID!

  # Metadata of the content
  metadata: ContentMetadata!

  # Progress data of the content for the current user.
  userProgressData: UserProgressData!

  # Progress data of the specified user.
  progressDataForUser(userId: UUID!): UserProgressData!
  mediaRecords: [MediaRecord!]!
}

#  schema file of the microservice
#  defines data types, queries and mutations
#  this can be done in a separate files as long as they are in this folder and
#  end with .graphqls
type MediaRecord {
  #  ID of the media record
  id: UUID!

  #  Name of the media record
  name: String!

  #  Type of the media record
  type: MediaType!

  #  IDs of the MediaContents this media record is associated with
  contentIds: [UUID!]!

  #  Temporary upload url for the media record
  uploadUrl: String!

  #  Temporary download url for the media record
  downloadUrl: String!

  # The progress data of the given user for this medium.
  userProgressData: MediaRecordProgressData!
}

type MediaRecordProgressData {
  # Whether the medium has been worked on by the user.
  workedOn: Boolean!

  # Date on which the medium was worked on by the user.
  # This is null if the medium has not been worked on by the user.
  dateWorkedOn: DateTime
}

#  The type of the media record
enum MediaType {
  VIDEO
  AUDIO
  IMAGE
  PRESENTATION
  DOCUMENT
  URL
}

type Mutation {
  # Create new media content
  createMediaContent(input: CreateMediaContentInput!): MediaContent!

  # Update an existing Content
  updateMediaContent(input: UpdateMediaContentInput!): MediaContent!

  # Create a new Assessment
  createAssessment(input: CreateAssessmentInput!): Assessment!

  # Update an existing Assessment
  updateAssessment(input: UpdateAssessmentInput!): Assessment!

  # Delete an existing Content, throws an error if no Content with the given id exists
  deleteContent(id: UUID!): UUID!

  # Add a tag to an existing content
  addTagToContent(contentId: UUID!, tagName: String): Content!

  # Remove a tag from an existing content
  removeTagFromContent(contentId: UUID!, tagName: String): Content!

  # ONLY FOR TESTING PURPOSES. DO NOT USE IN FRONTEND. WILL BE REMOVED.
  #
  # Triggers the recalculation of the reward score of the user.
  # This is done automatically at some time in the night.
  #
  # The purpose of this mutation is to allow testing of the reward score and demonstrate the functionality.
  recalculateScores(courseId: UUID!, userId: UUID!): RewardScores! @deprecated(reason: "Only for testing purposes. Will be removed.")

  #  Creates a new media record
  createMediaRecord(input: CreateMediaRecordInput!): MediaRecord!

  #  Updates an existing media record with the given UUID
  updateMediaRecord(input: UpdateMediaRecordInput!): MediaRecord!

  #  Deletes the media record with the given UUID
  deleteMediaRecord(id: UUID!): UUID!

  # Logs that a media has been worked on by the current user.
  # See https://gits-enpro.readthedocs.io/en/latest/dev-manuals/gamification/userProgress.html
  #
  # Possible side effects:
  # When all media records of a content have been worked on by a user,
  # a user-progress event is emitted for the content.
  logMediaRecordWorkedOn(mediaRecordId: UUID!): MediaRecord!

  # Creates a new flashcard set.
  createFlashcardSet(input: CreateFlashcardSetInput!): FlashcardSet!

  # Deletes a flashcard set. Throws an error if the flashcard set does not exist.
  # The contained flashcards are deleted as well.
  deleteFlashcardSet(input: UUID!): UUID!

  # Creates a new flashcard. Throws an error if the flashcard set does not exist.
  createFlashcard(input: CreateFlashcardInput!): Flashcard!

  # Updates a flashcard. Throws an error if the flashcard does not exist.
  updateFlashcard(input: UpdateFlashcardInput!): Flashcard!

  # Deletes a flashcard. Throws an error if the flashcard does not exist.
  deleteFlashcard(input: UUID!): UUID!

  # Logs that a user has learned a flashcard.
  logFlashcardLearned(input: LogFlashcardLearnedInput!): Flashcard!

  # Creates a new course with the given input and returns the created course.
  createCourse(input: CreateCourseInput!): Course!

  # Creates a new chapter with the given input and returns the created chapter.
  # The course id must be a course id of an existing course.
  createChapter(input: CreateChapterInput!): Chapter!

  # Updates an existing course with the given input and returns the updated course.
  # The course id must be a course id of an existing course.
  updateCourse(input: UpdateCourseInput!): Course!

  # Updates an existing chapter with the given input and returns the updated chapter.
  # The chapter id must be a chapter id of an existing chapter.
  updateChapter(input: UpdateChapterInput!): Chapter!

  # Deletes an existing course, throws an error if no course with the given id exists.
  deleteCourse(id: UUID!): UUID!

  # Deletes an existing chapter, throws an error if no chapter with the given id exists.
  deleteChapter(id: UUID!): UUID!

  # registers a user to a course with a role
  createMembership(input: CourseMembershipInput!): CourseMembership!

  # updates the role of a user in a course
  updateMembership(input: CourseMembershipInput!): CourseMembership!

  # deletes user course link
  deleteMembership(input: CourseMembershipInput!): CourseMembership!
}

# Specifies the page size and page number for paginated results.
input Pagination {
  # The page number, starting at 0.
  # If not specified, the default value is 0.
  # For values greater than 0, the page size must be specified.
  # If this value is larger than the number of pages, an empty page is returned.
  page: Int! = 0

  # The number of elements per page.
  size: Int!
}

# Return type for information about paginated results.
type PaginationInfo {
  # The current page number.
  page: Int!

  # The number of elements per page.
  size: Int!

  # The total number of elements across all pages.
  totalElements: Int!

  # The total number of pages.
  totalPages: Int!

  # Whether there is a next page.
  hasNext: Boolean!
}

type ProgressLogItem {
  # The date the user completed the content item.
  timestamp: DateTime!

  # Whether the user completed the content item successfully.
  success: Boolean!

  # Value between 0 and 1 representing the user's correctness on the content item.
  # Can be null as some contents cannot provide a meaningful correctness value.
  correctness: Float!

  # How many hints the user used to complete the content item.
  hintsUsed: Int!

  # Time in milliseconds it took the user to complete the content item.
  # Can be null for contents that do not measure completion time.
  timeToComplete: Int
}

type PublicUserInfo {
  id: UUID!
  userName: String!
}

type Query {
  # get all contents
  contents: ContentPayload!

  # get contents by ids
  contentsByIds(ids: [UUID!]!): [Content!]!

  # get contents by chapter ids. Returns a list containing sublists, where each sublist contains all contents
  # associated with that chapter
  contentsByChapterIds(chapterIds: [UUID!]!): [[Content!]!]!

  # Get the reward score of the current user for the specified course.
  userCourseRewardScores(courseId: UUID!): RewardScores!

  # Get the reward score of the specified user for the specified course.
  courseRewardScoresForUser(courseId: UUID!, userId: UUID!): RewardScores!

  # Gets the power scores for each user in the course, ordered by power score descending.
  scoreboard(courseId: UUID!): [ScoreboardItem!]!

  #  Returns the media records with the given IDs
  mediaRecordsById(ids: [UUID!]!): [MediaRecord!]!

  #  Returns all media records
  mediaRecords: [MediaRecord!]!

  #  Returns the media records associated the given content IDs as a list of lists where each sublist contains
  #  the media records associated with the content ID at the same index in the input list
  mediaRecordsByContentIds(contentIds: [UUID!]!): [[MediaRecord!]!]!

  # Get flashcards by their ids
  flashcardsByIds(ids: [UUID!]!): [Flashcard!]!

  # Get flashcard sets by their assessment ids.
  # Returns a list of lists of flashcard sets, where each list corresponds to a single assessment id.
  flashcardSetsByAssessmentIds(assessmentIds: [UUID!]!): [FlashcardSet!]!

  # Get a list of courses. Can be filtered, sorted and paginated.
  courses(
    filter: CourseFilter

    # The fields to sort by.
    # Throws an error if no field with the given name exists.
    sortBy: [String!]

    # The sort direction for each field. If not specified, defaults to ASC.
    sortDirection: [SortDirection!]! = [ASC]
    pagination: Pagination
  ): CoursePayload!

  # Returns the courses with the given ids.
  coursesById(ids: [UUID!]!): [Course!]!

  # Returns a set of Resource Objects for the given resource ids, containing a
  # list of all course IDs for a resource and its availability in the course.
  resourceById(ids: [UUID!]!): [CourseResourceAssociation!]!

  # Get the list of chapters for a course. Can be filtered, sorted and paginated.
  # Throws an error if the course does not exist.
  # The default sort order is by chapter number.
  chapters(
    courseId: UUID!
    filter: ChapterFilter

    # The fields to sort by. The default sort order is by chapter number.
    # Throws an error if no field with the given name exists.
    sortBy: [String!]! = []

    # The sort direction for each field. If not specified, defaults to ASC.
    sortDirection: [SortDirection!]! = [ASC]
    pagination: Pagination
  ): ChapterPayload!

  # Retrieves a list of course memberships for a user ID
  courseMemberships(id: UUID!): [CourseMembership!]

  # Retrieves a list of course memberships for each user in a list of user IDs
  courseMembershipsBatched(ids: [UUID!]!): [[CourseMembership!]!]!

  # Gets the publicly available information for a user with the specified ID.
  publicUserInfo(id: UUID!): PublicUserInfo!

  # Gets the publicly available information for a list of users with the specified IDs.
  publicUserInfoBatched(ids: [UUID!]!): [PublicUserInfo!]!

  # Gets the user information of the currently authorized user.
  currentUserInfo: UserInfo!

  # Gets all of the user information of the specified user.
  # Only available to the user themselves and privileged users.
  userInfo(id: UUID!): UserInfo!

  # Gets all of the users' information for a list of users with the specified IDs.
  # Only available to the user themselves and privileged users.
  userInfoBatched(ids: [UUID!]!): [UserInfo!]!
}

scalar ResolveToSourceArgs

# The reason why the reward score has changed.
enum RewardChangeReason {
  # The user has completed a content for the first time.
  # The associated contents are the content that were completed.
  CONTENT_DONE

  # The user has reviewed a content.
  # The associated contents are the content that were reviewed.
  CONTENT_REVIEWED

  # There exists a content that is due for learning.
  # The associated contents are the content that are due for learning.
  CONTENT_DUE_FOR_LEARNING

  # There exists a content that is due for repetition.
  # The associated contents are the content that are due for repetition.
  CONTENT_DUE_FOR_REPETITION

  # The score changed because the underlying scores changed.
  # Relevant for the power score.
  COMPOSITE_VALUE
}

# An item in the reward score log.
type RewardLogItem {
  # The date when the reward score changed.
  date: DateTime!

  # The difference between the previous and the new reward score.
  difference: Int!

  # The old reward score.
  oldValue: Int!

  # The new reward score.
  newValue: Int!

  # The reason why the reward score has changed.
  reason: RewardChangeReason!

  # The ids of the contents that are associated with the change.
  associatedContentIds: [UUID!]!
  associatedContents: [Content!]!
}

# The reward score of a user.
type RewardScore {
  # The absolute value of the reward score.
  # Health and fitness are between 0 and 100.
  # Growth, strength and power can be any non-negative integer.
  value: Int!

  # The relative value of the reward score.
  # Shows how many points relative to the total points have been achieved.
  # Only used for growth currently.
  percentage: Float!

  # A log of the changes to the reward score, ordered by date descending.
  log: [RewardLogItem!]!
}

# The five reward scores of a user.
type RewardScores {
  # Health represents how up-to-date the user is with the course.
  health: RewardScore!

  # Fitness represents how well the user repeats previously learned content.
  fitness: RewardScore!

  # Growth represents the overall progress of the user.
  growth: RewardScore!

  # Strength is earned by competing with other users.
  strength: RewardScore!

  # A composite score of all the other scores.
  power: RewardScore!
}

# An item in the scoreboard.
type ScoreboardItem {
  # The user id of the user.
  userId: UUID!

  # The power score of the user.
  powerScore: Int!
  user: PublicUserInfo!
}

# Type of the assessment
enum SkillType {
  REMEMBER
  UNDERSTAND
  APPLY
  ANALYSE
}

# Specifies the sort direction, either ascending or descending.
enum SortDirection {
  ASC
  DESC
}

# Filter for string values.
# If multiple filters are specified, they are combined with AND.
input StringFilter {
  # A string value to match exactly.
  equals: String

  # A string value that must be contained in the field that is being filtered.
  contains: String

  # If true, the filter is case-insensitive.
  ignoreCase: Boolean! = false
}

# An RFC-3339 compliant Full Time Scalar
scalar Time

input UpdateAssessmentInput {
  # ID of the Content to update
  id: UUID!

  # Metadata for the new Content
  metadata: UpdateContentMetadataInput!

  # Assessment metadata
  assessmentMetadata: AssessmentMetadataInput!
}

# Input type for updating chapters.
# The ID field specifies which chapter should be updated, all other fields specify the new values.
input UpdateChapterInput {
  # UUID of the chapter that should be updated.
  id: UUID!

  # Title of the chapter, maximum length is 255 characters, must not be blank.
  title: String!

  # Description of the chapter, maximum length is 3000 characters.
  description: String!

  # Number of the chapter, determines the order of the chapters, must be positive.
  number: Int!

  # Start date of the chapter, ISO 8601 format.
  # Must be before the end date.
  startDate: DateTime!

  # End date of the chapter, ISO 8601 format.
  # Must be after the start date.
  endDate: DateTime!

  # Suggested Start date to start the chapter, ISO 8601 format.
  # Must be after Start Date and before the End dates.
  suggestedStartDate: DateTime

  # Suggested End date of the chapter, ISO 8601 format.
  # Must be after the Start Dates and before the End dates.
  suggestedEndDate: DateTime
}

input UpdateContentMetadataInput {
  # Name of the content
  name: String!

  # Date when the content should be done
  suggestedDate: DateTime!

  # Number of reward points a student receives for completing this content
  rewardPoints: Int!

  # ID of the chapter this content is associated with
  chapterId: UUID!

  # TagNames this content is tagged with
  tagNames: [String!]! = []
}

# Input type for updating an existing course. See also on the course type for detailed field descriptions.
# The id specifies the course that should be updated, the other fields specify the new values.
input UpdateCourseInput {
  # UUID of the course that should be updated.
  # Must be an id of an existing course, otherwise an error is returned.
  id: UUID!

  # The new title of the course, max 255 characters, must not be blank.
  title: String!

  # The new description of the course, max 3000 characters.
  description: String!

  # The new start date of the course, ISO 8601 format.
  startDate: DateTime!

  # The new end date of the course, ISO 8601 format.
  endDate: DateTime!

  # The new published status of the course.
  published: Boolean!
}

input UpdateFlashcardInput {
  # Id of the flashcard to update.
  id: UUID!

  # List of sides of this flashcard. Must be at least two sides.
  sides: [UpdateFlashcardSideInput!]!
}

input UpdateFlashcardSideInput {
  # Text of this flashcard side. This can be markdown. Max length is 3000 characters.
  text: String!

  # Label of this flashcard side. E.g. "Front" or "Back", or "Question" or "Answer".
  label: String!

  # Whether this side is a question, i.e. should be shown to the user to guess the other sides or not.
  isQuestion: Boolean!
}

input UpdateMediaContentInput {
  # ID of the Content to update
  id: UUID!

  # Metadata for the new Content
  metadata: UpdateContentMetadataInput!
}

input UpdateMediaRecordInput {
  #  ID of the media record which should be updated
  id: UUID!

  #  New name of the media record. Cannot be blank, maximum length 255 characters.
  name: String!

  #  New type of the media record.
  type: MediaType!

  #  IDs of the MediaContents this media record is associated with
  contentIds: [UUID!]!
}

# A Url scalar
scalar Url

type UserInfo {
  id: UUID!
  userName: String!
  firstName: String!
  lastName: String!

  # The course memberships of the user.
  courseMemberships: [CourseMembership!]!
}

# Represents a user's progress on a content item.
# See https://gits-enpro.readthedocs.io/en/latest/dev-manuals/gamification/userProgress.html
type UserProgressData {
  # The user's id.
  userId: UUID!

  # The id of the content item.
  contentId: UUID!

  # A list of entries each representing the user completing the content item.
  # Sorted by date in descending order.
  log: [ProgressLogItem]!

  # The learning interval in days for the content item.
  # If null, the content item is not scheduled for learning.
  learningInterval: Int

  # The next time the content should be learned.
  # Calculated using the date the user completed the content item and the learning interval.
  # This is null if the user has not completed the content item once.
  nextLearnDate: DateTime

  # The last time the content was learned.
  # This is null if the user has not completed the content item once.
  lastLearnDate: DateTime
}

# A universally unique identifier compliant UUID Scalar
scalar UUID
